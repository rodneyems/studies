// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	application "arquitetura-hexagonal/application"

	mock "github.com/stretchr/testify/mock"
)

// ProductWriter is an autogenerated mock type for the ProductWriter type
type ProductWriter struct {
	mock.Mock
}

// Save provides a mock function with given fields: product
func (_m *ProductWriter) Save(product application.ProductInterface) (application.ProductInterface, error) {
	ret := _m.Called(product)

	var r0 application.ProductInterface
	if rf, ok := ret.Get(0).(func(application.ProductInterface) application.ProductInterface); ok {
		r0 = rf(product)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(application.ProductInterface)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(application.ProductInterface) error); ok {
		r1 = rf(product)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewProductWriter interface {
	mock.TestingT
	Cleanup(func())
}

// NewProductWriter creates a new instance of ProductWriter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProductWriter(t mockConstructorTestingTNewProductWriter) *ProductWriter {
	mock := &ProductWriter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
